using System;
using System.Globalization;
using Newtonsoft.Json;

namespace iSukces.UnitedValues;

// -----===== autogenerated code =====-----
// ReSharper disable All
// generator: FractionValuesGenerator, UnitJsonConverterGenerator, MultiplyAlgebraGenerator, MultiplyAlgebraGenerator, MultiplyAlgebraGenerator, MultiplyAlgebraGenerator, MultiplyAlgebraGenerator, MultiplyAlgebraGenerator, MultiplyAlgebraGenerator, MultiplyAlgebraGenerator
[Serializable]
[JsonConverter(typeof(DensityJsonConverter))]
public partial struct Density : IUnitedValue<DensityUnit>, IEquatable<Density>, IFormattable
{
    /// <summary>
    /// creates instance of Density
    /// </summary>
    /// <param name="value">value</param>
    /// <param name="unit">unit</param>
    public Density(decimal value, DensityUnit unit)
    {
        Value = value;
        Unit = unit;
    }

    public Density(decimal value, MassUnit counterUnit, VolumeUnit denominatorUnit)
    {
        Value = value;
        Unit = new DensityUnit(counterUnit, denominatorUnit);
    }

    public Density ConvertTo(DensityUnit newUnit)
    {
        // generator : FractionValuesGenerator.Add_ConvertTo
        if (Unit.Equals(newUnit))
            return this;
        var a = new Mass(Value, Unit.CounterUnit);
        var b = new Volume(1, Unit.DenominatorUnit);
        a = a.ConvertTo(newUnit.CounterUnit);
        b = b.ConvertTo(newUnit.DenominatorUnit);
        return new Density(a.Value / b.Value, newUnit);
    }

    public bool Equals(Density other)
    {
        // generator : FractionValuesGenerator
        return Value == other.Value && Unit is not null && Unit.Equals(other.Unit);
    }

    public bool Equals(IUnitedValue<DensityUnit>? other)
    {
        // generator : FractionValuesGenerator
        if (other is null)
            return false;
        return Value == other.Value && Unit is not null && Unit.Equals(other.Unit);
    }

    public override bool Equals(object? other)
    {
        // generator : FractionValuesGenerator
        return other is IUnitedValue<DensityUnit> value && Equals(value);
    }

    public decimal GetBaseUnitValue()
    {
        // generator : BasicUnitValuesGenerator.Add_GetBaseUnitValue
        var factor1 = GlobalUnitRegistry.Factors.Get(Unit.CounterUnit);
        var factor2 = GlobalUnitRegistry.Factors.Get(Unit.DenominatorUnit);
        if ((factor1.HasValue && factor2.HasValue))
            return Value * factor1.Value / factor2.Value;
        throw new Exception("Unable to find multiplication for unit " + Unit);
    }

    public override int GetHashCode()
    {
        unchecked
        {
            return (Value.GetHashCode() * 397) ^ Unit.GetHashCode();
        }
    }

    public Density Round(int decimalPlaces)
    {
        return new Density(Math.Round(Value, decimalPlaces), Unit);
    }

    /// <summary>
    /// Returns unit name
    /// </summary>
    public override string ToString()
    {
        return Value.ToString(CultureInfo.InvariantCulture) + Unit.UnitName;
    }

    /// <summary>
    /// Returns unit name
    /// </summary>
    /// <param name="format"></param>
    /// <param name="provider"></param>
    public string ToString(string format, IFormatProvider provider = null)
    {
        return this.ToStringFormat(format, provider);
    }

    public Density WithCounterUnit(MassUnit newUnit)
    {
        // generator : FractionValuesGenerator.Add_WithCounterUnit
        var oldUnit = Unit.CounterUnit;
        if (oldUnit == newUnit)
            return this;
        var oldFactor = GlobalUnitRegistry.Factors.GetThrow(oldUnit);
        var newFactor = GlobalUnitRegistry.Factors.GetThrow(newUnit);
        var resultUnit = Unit.WithCounterUnit(newUnit);
        return new Density(oldFactor / newFactor * Value, resultUnit);
    }

    public Density WithDenominatorUnit(VolumeUnit newUnit)
    {
        // generator : FractionValuesGenerator.Add_WithDenominatorUnit
        var oldUnit = Unit.DenominatorUnit;
        if (oldUnit == newUnit)
            return this;
        var oldFactor = GlobalUnitRegistry.Factors.GetThrow(oldUnit);
        var newFactor = GlobalUnitRegistry.Factors.GetThrow(newUnit);
        var resultUnit = Unit.WithDenominatorUnit(newUnit);
        return new Density(newFactor / oldFactor * Value, resultUnit);
    }

    /// <summary>
    /// Inequality operator
    /// </summary>
    /// <param name="left">first value to compare</param>
    /// <param name="right">second value to compare</param>
    public static bool operator !=(Density left, Density right)
    {
        return !left.Equals(right);
    }

    /// <summary>
    /// Multiplication operation
    /// </summary>
    /// <param name="density">left factor (multiplicand)</param>
    /// <param name="volumeStream">rigth factor (multiplier)</param>
    public static MassStream operator *(Density density, VolumeStream volumeStream)
    {
        // generator : MultiplyAlgebraGenerator.CreateOperator
        // scenario with hint
        // .Is<Density, VolumeStream, MassStream>("*")
        // hint location GetBasicOperatorHints, line 31
        var densityUnit = density.Unit;
        var volumeStreamUnit = volumeStream.Unit;
        var tmp1 = volumeStreamUnit.DenominatorUnit;
        var targetRightUnit = new VolumeStreamUnit(densityUnit.DenominatorUnit, tmp1);
        var resultUnit = new MassStreamUnit(densityUnit.CounterUnit, tmp1);
        var volumeStreamConverted = volumeStream.ConvertTo(targetRightUnit);
        var value = density.Value * volumeStreamConverted.Value;
        return new MassStream(value, resultUnit);
        // scenario F1
    }

    /// <summary>
    /// Multiplication operation
    /// </summary>
    /// <param name="volumeStream">left factor (multiplicand)</param>
    /// <param name="density">rigth factor (multiplier)</param>
    public static MassStream operator *(VolumeStream volumeStream, Density density)
    {
        // generator : MultiplyAlgebraGenerator.CreateOperator
        // scenario with hint
        // .Is<VolumeStream, Density, MassStream>("*")
        // hint location GetBasicOperatorHints, line 31
        var densityUnit = density.Unit;
        var tmp1 = densityUnit.CounterUnit;
        var volumeStreamUnit = volumeStream.Unit;
        var targetRightUnit = new DensityUnit(tmp1, volumeStreamUnit.CounterUnit);
        var resultUnit = new MassStreamUnit(tmp1, volumeStreamUnit.DenominatorUnit);
        var densityConverted = density.ConvertTo(targetRightUnit);
        var value = volumeStream.Value * densityConverted.Value;
        return new MassStream(value, resultUnit);
        // scenario F1
    }

    /// <summary>
    /// Multiplication operation
    /// </summary>
    /// <param name="density">left factor (multiplicand)</param>
    /// <param name="volumeStream">rigth factor (multiplier)</param>
    public static MassStream? operator *(Density? density, VolumeStream volumeStream)
    {
        // generator : MultiplyAlgebraGenerator.CreateCode
        if (density is null)
            return null;
        return density.Value * volumeStream;
    }

    /// <summary>
    /// Multiplication operation
    /// </summary>
    /// <param name="volumeStream">left factor (multiplicand)</param>
    /// <param name="density">rigth factor (multiplier)</param>
    public static MassStream? operator *(VolumeStream? volumeStream, Density density)
    {
        // generator : MultiplyAlgebraGenerator.CreateCode
        if (volumeStream is null)
            return null;
        return volumeStream.Value * density;
    }

    /// <summary>
    /// Multiplication operation
    /// </summary>
    /// <param name="density">left factor (multiplicand)</param>
    /// <param name="volumeStream">rigth factor (multiplier)</param>
    public static MassStream? operator *(Density density, VolumeStream? volumeStream)
    {
        // generator : MultiplyAlgebraGenerator.CreateCode
        if (volumeStream is null)
            return null;
        return density * volumeStream.Value;
    }

    /// <summary>
    /// Multiplication operation
    /// </summary>
    /// <param name="volumeStream">left factor (multiplicand)</param>
    /// <param name="density">rigth factor (multiplier)</param>
    public static MassStream? operator *(VolumeStream volumeStream, Density? density)
    {
        // generator : MultiplyAlgebraGenerator.CreateCode
        if (density is null)
            return null;
        return volumeStream * density.Value;
    }

    /// <summary>
    /// Multiplication operation
    /// </summary>
    /// <param name="density">left factor (multiplicand)</param>
    /// <param name="volumeStream">rigth factor (multiplier)</param>
    public static MassStream? operator *(Density? density, VolumeStream? volumeStream)
    {
        // generator : MultiplyAlgebraGenerator.CreateCode
        if (density is null || volumeStream is null)
            return null;
        return density.Value * volumeStream.Value;
    }

    /// <summary>
    /// Multiplication operation
    /// </summary>
    /// <param name="volumeStream">left factor (multiplicand)</param>
    /// <param name="density">rigth factor (multiplier)</param>
    public static MassStream? operator *(VolumeStream? volumeStream, Density? density)
    {
        // generator : MultiplyAlgebraGenerator.CreateCode
        if (volumeStream is null || density is null)
            return null;
        return volumeStream.Value * density.Value;
    }

    /// <summary>
    /// Equality operator
    /// </summary>
    /// <param name="left">first value to compare</param>
    /// <param name="right">second value to compare</param>
    public static bool operator ==(Density left, Density right)
    {
        return left.Equals(right);
    }

    public static Density Parse(string value)
    {
        // generator : FractionValuesGenerator.Add_Parse
        if (string.IsNullOrEmpty(value))
            throw new ArgumentNullException(nameof(value));
        var r = CommonParse.Parse(value, typeof(Density));
        var units = Common.SplitUnitNameBySlash(r.UnitName);
        if (units.Length != 2)
            throw new Exception($"{r.UnitName} is not valid Density unit");
        var counterUnit = new MassUnit(units[0]);
        var denominatorUnit = new VolumeUnit(units[1]);
        return new Density(r.Value, counterUnit, denominatorUnit);
    }

    /// <summary>
    /// value
    /// </summary>
    public decimal Value { get; }

    /// <summary>
    /// unit
    /// </summary>
    public DensityUnit Unit { get; }

}

public partial class DensityJsonConverter : JsonConverter
{
    public override bool CanConvert(Type objectType)
    {
        return objectType == typeof(DensityUnit);
    }

    /// <summary>
    /// Reads the JSON representation of the object.
    /// </summary>
    /// <param name="reader">The JsonReader to read from.</param>
    /// <param name="objectType">Type of the object.</param>
    /// <param name="existingValue">The existing value of object being read.</param>
    /// <param name="serializer">The calling serializer.</param>
    public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
    {
        if (reader.ValueType == typeof(string))
        {
            if (objectType == typeof(Density))
                return Density.Parse((string)reader.Value);
        }
        throw new NotImplementedException();
    }

    public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
    {
        if (value is null)
            writer.WriteNull();
        else
            writer.WriteValue(value.ToString());
    }

}
