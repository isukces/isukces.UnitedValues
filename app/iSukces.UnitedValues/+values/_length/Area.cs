using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using Newtonsoft.Json;

namespace iSukces.UnitedValues
{
    public partial struct Area
    {
        public Area ConvertToMeter()
        {
            return ConvertTo(AreaUnits.SquareMeter);
        }

        public Area RoundSquareMeter(int decimalPlaces)
        {
            return ConvertToMeter().Round(decimalPlaces);
        }

        public Length GetCircleRadius()
        {
            var u = Unit.GetLengthUnit();
            var r = Math.Sqrt((double)Value / Math.PI);
            return new Length((decimal)r, u);
        }

        public Length GetCircleDiameter()
        {
            return 2 * GetCircleRadius();
        }
    }

    partial class AreaUnits
    {
        public const string SquareSign = "Â²";
    }
}

// -----===== autogenerated code =====-----
// ReSharper disable All
// generator: BasicUnitValuesGenerator, UnitJsonConverterGenerator, UnitExtensionsGenerator, MultiplyAlgebraGenerator, MultiplyAlgebraGenerator, MultiplyAlgebraGenerator, MultiplyAlgebraGenerator, MultiplyAlgebraGenerator, MultiplyAlgebraGenerator, MultiplyAlgebraGenerator, MultiplyAlgebraGenerator, MultiplyAlgebraGenerator, MultiplyAlgebraGenerator, MultiplyAlgebraGenerator, MultiplyAlgebraGenerator, MultiplyAlgebraGenerator, MultiplyAlgebraGenerator, MultiplyAlgebraGenerator, MultiplyAlgebraGenerator, MultiplyAlgebraGenerator, MultiplyAlgebraGenerator, MultiplyAlgebraGenerator, MultiplyAlgebraGenerator, MultiplyAlgebraGenerator, MultiplyAlgebraGenerator, MultiplyAlgebraGenerator, MultiplyAlgebraGenerator, MultiplyAlgebraGenerator, MultiplyAlgebraGenerator, MultiplyAlgebraGenerator, MultiplyAlgebraGenerator, MultiplyAlgebraGenerator, MultiplyAlgebraGenerator, MultiplyAlgebraGenerator, MultiplyAlgebraGenerator, MultiplyAlgebraGenerator, MultiplyAlgebraGenerator, MultiplyAlgebraGenerator, MultiplyAlgebraGenerator, MultiplyAlgebraGenerator, MultiplyAlgebraGenerator, MultiplyAlgebraGenerator, MultiplyAlgebraGenerator, MultiplyAlgebraGenerator, MultiplyAlgebraGenerator, MultiplyAlgebraGenerator, MultiplyAlgebraGenerator, MultiplyAlgebraGenerator, MultiplyAlgebraGenerator, MultiplyAlgebraGenerator, MultiplyAlgebraGenerator, MultiplyAlgebraGenerator, MultiplyAlgebraGenerator, MultiplyAlgebraGenerator, MultiplyAlgebraGenerator

namespace iSukces.UnitedValues
{
    [Serializable]
    [JsonConverter(typeof(AreaJsonConverter))]
    public partial struct Area : IUnitedValue<AreaUnit>, IEquatable<Area>, IFormattable
    {
        /// <summary>
        /// creates instance of Area
        /// </summary>
        /// <param name="value">value</param>
        /// <param name="unit">unit</param>
        public Area(decimal value, AreaUnit unit)
        {
            Value = value;
            if (unit is null)
                throw new NullReferenceException(nameof(unit));
            _unit = unit;
        }

        public Area ConvertTo(AreaUnit newUnit)
        {
            // generator : BasicUnitValuesGenerator.Add_ConvertTo
            if (Unit.Equals(newUnit))
                return this;
            var basic = GetBaseUnitValue();
            var factor = GlobalUnitRegistry.Factors.GetThrow(newUnit);
            return new Area(basic / factor, newUnit);
        }

        public bool Equals(Area other)
        {
            return Value == other.Value && !(Unit is null) && Unit.Equals(other.Unit);
        }

        public bool Equals(IUnitedValue<AreaUnit> other)
        {
            if (other is null)
                return false;
            return Value == other.Value && !(Unit is null) && Unit.Equals(other.Unit);
        }

        public override bool Equals(object other)
        {
            return other is IUnitedValue<AreaUnit> unitedValue ? Equals(unitedValue) : false;
        }

        public decimal GetBaseUnitValue()
        {
            // generator : BasicUnitValuesGenerator.Add_GetBaseUnitValue
            if (Unit.Equals(BaseUnit))
                return Value;
            var factor = GlobalUnitRegistry.Factors.Get(Unit);
            if (!(factor is null))
                return Value * factor.Value;
            throw new Exception("Unable to find multiplication for unit " + Unit);
        }

        public override int GetHashCode()
        {
            unchecked
            {
                return (Value.GetHashCode() * 397) ^ Unit.GetHashCode();
            }
        }

        public Area Round(int decimalPlaces)
        {
            return new Area(Math.Round(Value, decimalPlaces), Unit);
        }

        /// <summary>
        /// Returns unit name
        /// </summary>
        public override string ToString()
        {
            return Value.ToString(CultureInfo.InvariantCulture) + Unit.UnitName;
        }

        /// <summary>
        /// Returns unit name
        /// </summary>
        /// <param name="format"></param>
        /// <param name="provider"></param>
        public string ToString(string format, IFormatProvider provider = null)
        {
            return this.ToStringFormat(format, provider);
        }

        /// <summary>
        /// implements - operator
        /// </summary>
        /// <param name="value"></param>
        public static Area operator -(Area value)
        {
            return new Area(-value.Value, value.Unit);
        }

        public static Area operator -(Area left, Area right)
        {
            // generator : BasicUnitValuesGenerator.Add_Algebra_PlusMinus
            if (left.Value.Equals(decimal.Zero) && string.IsNullOrEmpty(left.Unit?.UnitName))
                return -right;
            if (right.Value.Equals(decimal.Zero) && string.IsNullOrEmpty(right.Unit?.UnitName))
                return left;
            right = right.ConvertTo(left.Unit);
            return new Area(left.Value - right.Value, left.Unit);
        }

        /// <summary>
        /// implements * operator
        /// </summary>
        /// <param name="value"></param>
        /// <param name="number"></param>
        public static Area operator *(Area value, decimal number)
        {
            return new Area(value.Value * number, value.Unit);
        }

        /// <summary>
        /// implements * operator
        /// </summary>
        /// <param name="number"></param>
        /// <param name="value"></param>
        public static Area operator *(decimal number, Area value)
        {
            return new Area(value.Value * number, value.Unit);
        }

        /// <summary>
        /// Multiplication operation
        /// </summary>
        /// <param name="area">left factor (multiplicand)</param>
        /// <param name="length">rigth factor (multiplier)</param>
        public static Volume operator *(Area area, Length length)
        {
            // generator : MultiplyAlgebraGenerator.CreateCodeForRelatedUnits
            // scenario C
            var rightUnit = GlobalUnitRegistry.Relations.GetOrThrow<AreaUnit, LengthUnit>(area.Unit);
            var resultUnit = GlobalUnitRegistry.Relations.GetOrThrow<AreaUnit, VolumeUnit>(area.Unit);
            var lengthConverted = length.ConvertTo(rightUnit);
            var value = area.Value * lengthConverted.Value;
            return new Volume(value, resultUnit);
        }

        /// <summary>
        /// Multiplication operation
        /// </summary>
        /// <param name="length">left factor (multiplicand)</param>
        /// <param name="area">rigth factor (multiplier)</param>
        public static Volume operator *(Length length, Area area)
        {
            // generator : MultiplyAlgebraGenerator.CreateCodeForRelatedUnits
            // scenario C
            var rightUnit = GlobalUnitRegistry.Relations.GetOrThrow<LengthUnit, AreaUnit>(length.Unit);
            var resultUnit = GlobalUnitRegistry.Relations.GetOrThrow<LengthUnit, VolumeUnit>(length.Unit);
            var areaConverted = area.ConvertTo(rightUnit);
            var value = length.Value * areaConverted.Value;
            return new Volume(value, resultUnit);
        }

        /// <summary>
        /// Multiplication operation
        /// </summary>
        /// <param name="area">left factor (multiplicand)</param>
        /// <param name="length">rigth factor (multiplier)</param>
        public static Volume? operator *(Area? area, Length length)
        {
            // generator : MultiplyAlgebraGenerator.CreateCode
            if (area is null)
                return null;
            return area.Value * length;
        }

        /// <summary>
        /// Multiplication operation
        /// </summary>
        /// <param name="length">left factor (multiplicand)</param>
        /// <param name="area">rigth factor (multiplier)</param>
        public static Volume? operator *(Length? length, Area area)
        {
            // generator : MultiplyAlgebraGenerator.CreateCode
            if (length is null)
                return null;
            return length.Value * area;
        }

        /// <summary>
        /// Multiplication operation
        /// </summary>
        /// <param name="area">left factor (multiplicand)</param>
        /// <param name="length">rigth factor (multiplier)</param>
        public static Volume? operator *(Area area, Length? length)
        {
            // generator : MultiplyAlgebraGenerator.CreateCode
            if (length is null)
                return null;
            return area * length.Value;
        }

        /// <summary>
        /// Multiplication operation
        /// </summary>
        /// <param name="length">left factor (multiplicand)</param>
        /// <param name="area">rigth factor (multiplier)</param>
        public static Volume? operator *(Length length, Area? area)
        {
            // generator : MultiplyAlgebraGenerator.CreateCode
            if (area is null)
                return null;
            return length * area.Value;
        }

        /// <summary>
        /// Multiplication operation
        /// </summary>
        /// <param name="area">left factor (multiplicand)</param>
        /// <param name="length">rigth factor (multiplier)</param>
        public static Volume? operator *(Area? area, Length? length)
        {
            // generator : MultiplyAlgebraGenerator.CreateCode
            if (area is null || length is null)
                return null;
            return area.Value * length.Value;
        }

        /// <summary>
        /// Multiplication operation
        /// </summary>
        /// <param name="length">left factor (multiplicand)</param>
        /// <param name="area">rigth factor (multiplier)</param>
        public static Volume? operator *(Length? length, Area? area)
        {
            // generator : MultiplyAlgebraGenerator.CreateCode
            if (length is null || area is null)
                return null;
            return length.Value * area.Value;
        }

        /// <summary>
        /// Multiplication operation
        /// </summary>
        /// <param name="area">left factor (multiplicand)</param>
        /// <param name="planarDensity">rigth factor (multiplier)</param>
        public static Mass operator *(Area area, PlanarDensity planarDensity)
        {
            // generator : MultiplyAlgebraGenerator.CreateCodeForRightFractionValue
            // scenario B
            var unit = new PlanarDensityUnit(planarDensity.Unit.CounterUnit, area.Unit);
            var planarDensityConverted    = planarDensity.WithDenominatorUnit(area.Unit);
            var value = area.Value * planarDensityConverted.Value;
            return new Mass(value, planarDensity.Unit.CounterUnit);
        }

        /// <summary>
        /// Multiplication operation
        /// </summary>
        /// <param name="planarDensity">left factor (multiplicand)</param>
        /// <param name="area">rigth factor (multiplier)</param>
        public static Mass operator *(PlanarDensity planarDensity, Area area)
        {
            // generator : MultiplyAlgebraGenerator.CreateCodeForLeftFractionValue
            // Mass operator *(PlanarDensity planarDensity, Area area)
            // scenario with hint
            // .Is<PlanarDensity, Area, Mass>("*")
            // hint location GetBasicOperatorHints, line 31
            var planarDensityUnit = planarDensity.Unit;
            var areaConverted = area.ConvertTo(planarDensityUnit.DenominatorUnit);
            var value = planarDensity.Value * areaConverted.Value;
            return new Mass(value, planarDensityUnit.CounterUnit);
            // scenario D1
        }

        /// <summary>
        /// Multiplication operation
        /// </summary>
        /// <param name="area">left factor (multiplicand)</param>
        /// <param name="planarDensity">rigth factor (multiplier)</param>
        public static Mass? operator *(Area? area, PlanarDensity planarDensity)
        {
            // generator : MultiplyAlgebraGenerator.CreateCode
            if (area is null)
                return null;
            return area.Value * planarDensity;
        }

        /// <summary>
        /// Multiplication operation
        /// </summary>
        /// <param name="planarDensity">left factor (multiplicand)</param>
        /// <param name="area">rigth factor (multiplier)</param>
        public static Mass? operator *(PlanarDensity? planarDensity, Area area)
        {
            // generator : MultiplyAlgebraGenerator.CreateCode
            if (planarDensity is null)
                return null;
            return planarDensity.Value * area;
        }

        /// <summary>
        /// Multiplication operation
        /// </summary>
        /// <param name="area">left factor (multiplicand)</param>
        /// <param name="planarDensity">rigth factor (multiplier)</param>
        public static Mass? operator *(Area area, PlanarDensity? planarDensity)
        {
            // generator : MultiplyAlgebraGenerator.CreateCode
            if (planarDensity is null)
                return null;
            return area * planarDensity.Value;
        }

        /// <summary>
        /// Multiplication operation
        /// </summary>
        /// <param name="planarDensity">left factor (multiplicand)</param>
        /// <param name="area">rigth factor (multiplier)</param>
        public static Mass? operator *(PlanarDensity planarDensity, Area? area)
        {
            // generator : MultiplyAlgebraGenerator.CreateCode
            if (area is null)
                return null;
            return planarDensity * area.Value;
        }

        /// <summary>
        /// Multiplication operation
        /// </summary>
        /// <param name="area">left factor (multiplicand)</param>
        /// <param name="planarDensity">rigth factor (multiplier)</param>
        public static Mass? operator *(Area? area, PlanarDensity? planarDensity)
        {
            // generator : MultiplyAlgebraGenerator.CreateCode
            if (area is null || planarDensity is null)
                return null;
            return area.Value * planarDensity.Value;
        }

        /// <summary>
        /// Multiplication operation
        /// </summary>
        /// <param name="planarDensity">left factor (multiplicand)</param>
        /// <param name="area">rigth factor (multiplier)</param>
        public static Mass? operator *(PlanarDensity? planarDensity, Area? area)
        {
            // generator : MultiplyAlgebraGenerator.CreateCode
            if (planarDensity is null || area is null)
                return null;
            return planarDensity.Value * area.Value;
        }

        /// <summary>
        /// Multiplication operation
        /// </summary>
        /// <param name="area">left factor (multiplicand)</param>
        /// <param name="density">rigth factor (multiplier)</param>
        public static LinearDensity operator *(Area area, Density density)
        {
            // generator : MultiplyAlgebraGenerator.CreateCodeForRightFractionValue
            // scenario with hint
            // .Is<Area, Density, LinearDensity>("*")
            // hint location GetBasicOperatorHints, line 31
            var densityUnit = density.Unit;
            var tmp1 = densityUnit.CounterUnit;
            var areaUnit = area.Unit;
            var targetRightUnit = new DensityUnit(tmp1, areaUnit.GetVolumeUnit());
            var resultUnit = new LinearDensityUnit(tmp1, areaUnit.GetLengthUnit());
            var densityConverted = density.ConvertTo(targetRightUnit);
            var value = area.Value * densityConverted.Value;
            return new LinearDensity(value, resultUnit);
        }

        /// <summary>
        /// Multiplication operation
        /// </summary>
        /// <param name="density">left factor (multiplicand)</param>
        /// <param name="area">rigth factor (multiplier)</param>
        public static LinearDensity operator *(Density density, Area area)
        {
            // generator : MultiplyAlgebraGenerator.CreateCodeForLeftFractionValue
            // LinearDensity operator *(Density density, Area area)
            // scenario with hint
            // .Is<Density, Area, LinearDensity>("*")
            // hint location GetBasicOperatorHints, line 31
            var densityUnit = density.Unit;
            var tmp1 = densityUnit.DenominatorUnit;
            var resultUnit = new LinearDensityUnit(densityUnit.CounterUnit, tmp1.GetLengthUnit());
            var areaConverted = area.ConvertTo(tmp1.GetAreaUnit());
            var value = density.Value * areaConverted.Value;
            return new LinearDensity(value, resultUnit);
        }

        /// <summary>
        /// Multiplication operation
        /// </summary>
        /// <param name="area">left factor (multiplicand)</param>
        /// <param name="density">rigth factor (multiplier)</param>
        public static LinearDensity? operator *(Area? area, Density density)
        {
            // generator : MultiplyAlgebraGenerator.CreateCode
            if (area is null)
                return null;
            return area.Value * density;
        }

        /// <summary>
        /// Multiplication operation
        /// </summary>
        /// <param name="density">left factor (multiplicand)</param>
        /// <param name="area">rigth factor (multiplier)</param>
        public static LinearDensity? operator *(Density? density, Area area)
        {
            // generator : MultiplyAlgebraGenerator.CreateCode
            if (density is null)
                return null;
            return density.Value * area;
        }

        /// <summary>
        /// Multiplication operation
        /// </summary>
        /// <param name="area">left factor (multiplicand)</param>
        /// <param name="density">rigth factor (multiplier)</param>
        public static LinearDensity? operator *(Area area, Density? density)
        {
            // generator : MultiplyAlgebraGenerator.CreateCode
            if (density is null)
                return null;
            return area * density.Value;
        }

        /// <summary>
        /// Multiplication operation
        /// </summary>
        /// <param name="density">left factor (multiplicand)</param>
        /// <param name="area">rigth factor (multiplier)</param>
        public static LinearDensity? operator *(Density density, Area? area)
        {
            // generator : MultiplyAlgebraGenerator.CreateCode
            if (area is null)
                return null;
            return density * area.Value;
        }

        /// <summary>
        /// Multiplication operation
        /// </summary>
        /// <param name="area">left factor (multiplicand)</param>
        /// <param name="density">rigth factor (multiplier)</param>
        public static LinearDensity? operator *(Area? area, Density? density)
        {
            // generator : MultiplyAlgebraGenerator.CreateCode
            if (area is null || density is null)
                return null;
            return area.Value * density.Value;
        }

        /// <summary>
        /// Multiplication operation
        /// </summary>
        /// <param name="density">left factor (multiplicand)</param>
        /// <param name="area">rigth factor (multiplier)</param>
        public static LinearDensity? operator *(Density? density, Area? area)
        {
            // generator : MultiplyAlgebraGenerator.CreateCode
            if (density is null || area is null)
                return null;
            return density.Value * area.Value;
        }

        /// <summary>
        /// Multiplication operation
        /// </summary>
        /// <param name="area">left factor (multiplicand)</param>
        /// <param name="pressure">rigth factor (multiplier)</param>
        public static Force operator *(Area area, Pressure pressure)
        {
            // generator : MultiplyAlgebraGenerator.CreateOperator
            // scenario with hint
            // .Is<Area, Pressure, Force>("*")
            // hint location HandleCreateOperatorCode, line 40
            var leftConverted = area.ConvertTo(AreaUnits.SquareMeter);
            var rightConverted = pressure.ConvertTo(PressureUnits.Pascal);
            var value = leftConverted.Value * rightConverted.Value;
            return new Force(value, ForceUnits.Newton);
            // scenario F3
        }

        /// <summary>
        /// Multiplication operation
        /// </summary>
        /// <param name="pressure">left factor (multiplicand)</param>
        /// <param name="area">rigth factor (multiplier)</param>
        public static Force operator *(Pressure pressure, Area area)
        {
            // generator : MultiplyAlgebraGenerator.CreateOperator
            // scenario with hint
            // .Is<Pressure, Area, Force>("*")
            // hint location HandleCreateOperatorCode, line 47
            var leftConverted = pressure.ConvertTo(PressureUnits.Pascal);
            var rightConverted = area.ConvertTo(AreaUnits.SquareMeter);
            var value = leftConverted.Value * rightConverted.Value;
            return new Force(value, ForceUnits.Newton);
            // scenario F3
        }

        /// <summary>
        /// Multiplication operation
        /// </summary>
        /// <param name="area">left factor (multiplicand)</param>
        /// <param name="pressure">rigth factor (multiplier)</param>
        public static Force? operator *(Area? area, Pressure pressure)
        {
            // generator : MultiplyAlgebraGenerator.CreateCode
            if (area is null)
                return null;
            return area.Value * pressure;
        }

        /// <summary>
        /// Multiplication operation
        /// </summary>
        /// <param name="pressure">left factor (multiplicand)</param>
        /// <param name="area">rigth factor (multiplier)</param>
        public static Force? operator *(Pressure? pressure, Area area)
        {
            // generator : MultiplyAlgebraGenerator.CreateCode
            if (pressure is null)
                return null;
            return pressure.Value * area;
        }

        /// <summary>
        /// Multiplication operation
        /// </summary>
        /// <param name="area">left factor (multiplicand)</param>
        /// <param name="pressure">rigth factor (multiplier)</param>
        public static Force? operator *(Area area, Pressure? pressure)
        {
            // generator : MultiplyAlgebraGenerator.CreateCode
            if (pressure is null)
                return null;
            return area * pressure.Value;
        }

        /// <summary>
        /// Multiplication operation
        /// </summary>
        /// <param name="pressure">left factor (multiplicand)</param>
        /// <param name="area">rigth factor (multiplier)</param>
        public static Force? operator *(Pressure pressure, Area? area)
        {
            // generator : MultiplyAlgebraGenerator.CreateCode
            if (area is null)
                return null;
            return pressure * area.Value;
        }

        /// <summary>
        /// Multiplication operation
        /// </summary>
        /// <param name="area">left factor (multiplicand)</param>
        /// <param name="pressure">rigth factor (multiplier)</param>
        public static Force? operator *(Area? area, Pressure? pressure)
        {
            // generator : MultiplyAlgebraGenerator.CreateCode
            if (area is null || pressure is null)
                return null;
            return area.Value * pressure.Value;
        }

        /// <summary>
        /// Multiplication operation
        /// </summary>
        /// <param name="pressure">left factor (multiplicand)</param>
        /// <param name="area">rigth factor (multiplier)</param>
        public static Force? operator *(Pressure? pressure, Area? area)
        {
            // generator : MultiplyAlgebraGenerator.CreateCode
            if (pressure is null || area is null)
                return null;
            return pressure.Value * area.Value;
        }

        /// <summary>
        /// Multiplication operation
        /// </summary>
        /// <param name="area">left factor (multiplicand)</param>
        /// <param name="irradiance">rigth factor (multiplier)</param>
        public static Power operator *(Area area, Irradiance irradiance)
        {
            // generator : MultiplyAlgebraGenerator.CreateCodeForRightFractionValue
            // scenario B
            var unit = new IrradianceUnit(irradiance.Unit.CounterUnit, area.Unit);
            var irradianceConverted    = irradiance.WithDenominatorUnit(area.Unit);
            var value = area.Value * irradianceConverted.Value;
            return new Power(value, irradiance.Unit.CounterUnit);
        }

        /// <summary>
        /// Multiplication operation
        /// </summary>
        /// <param name="irradiance">left factor (multiplicand)</param>
        /// <param name="area">rigth factor (multiplier)</param>
        public static Power operator *(Irradiance irradiance, Area area)
        {
            // generator : MultiplyAlgebraGenerator.CreateCodeForLeftFractionValue
            // Power operator *(Irradiance irradiance, Area area)
            // scenario with hint
            // hint location HandleCreateOperatorCode, line 31 Def_Power_Length_LinearPowerLoss
            var areaConverted = area.ConvertTo(irradiance.Unit.DenominatorUnit);
            var value = irradiance.Value * areaConverted.Value;
            return new Power(value, irradiance.Unit.CounterUnit);
            // scenario D1
        }

        /// <summary>
        /// Multiplication operation
        /// </summary>
        /// <param name="area">left factor (multiplicand)</param>
        /// <param name="irradiance">rigth factor (multiplier)</param>
        public static Power? operator *(Area? area, Irradiance irradiance)
        {
            // generator : MultiplyAlgebraGenerator.CreateCode
            if (area is null)
                return null;
            return area.Value * irradiance;
        }

        /// <summary>
        /// Multiplication operation
        /// </summary>
        /// <param name="irradiance">left factor (multiplicand)</param>
        /// <param name="area">rigth factor (multiplier)</param>
        public static Power? operator *(Irradiance? irradiance, Area area)
        {
            // generator : MultiplyAlgebraGenerator.CreateCode
            if (irradiance is null)
                return null;
            return irradiance.Value * area;
        }

        /// <summary>
        /// Multiplication operation
        /// </summary>
        /// <param name="area">left factor (multiplicand)</param>
        /// <param name="irradiance">rigth factor (multiplier)</param>
        public static Power? operator *(Area area, Irradiance? irradiance)
        {
            // generator : MultiplyAlgebraGenerator.CreateCode
            if (irradiance is null)
                return null;
            return area * irradiance.Value;
        }

        /// <summary>
        /// Multiplication operation
        /// </summary>
        /// <param name="irradiance">left factor (multiplicand)</param>
        /// <param name="area">rigth factor (multiplier)</param>
        public static Power? operator *(Irradiance irradiance, Area? area)
        {
            // generator : MultiplyAlgebraGenerator.CreateCode
            if (area is null)
                return null;
            return irradiance * area.Value;
        }

        /// <summary>
        /// Multiplication operation
        /// </summary>
        /// <param name="area">left factor (multiplicand)</param>
        /// <param name="irradiance">rigth factor (multiplier)</param>
        public static Power? operator *(Area? area, Irradiance? irradiance)
        {
            // generator : MultiplyAlgebraGenerator.CreateCode
            if (area is null || irradiance is null)
                return null;
            return area.Value * irradiance.Value;
        }

        /// <summary>
        /// Multiplication operation
        /// </summary>
        /// <param name="irradiance">left factor (multiplicand)</param>
        /// <param name="area">rigth factor (multiplier)</param>
        public static Power? operator *(Irradiance? irradiance, Area? area)
        {
            // generator : MultiplyAlgebraGenerator.CreateCode
            if (irradiance is null || area is null)
                return null;
            return irradiance.Value * area.Value;
        }

        /// <summary>
        /// Multiplication operation
        /// </summary>
        /// <param name="area">left factor (multiplicand)</param>
        /// <param name="velocity">rigth factor (multiplier)</param>
        public static VolumeStream operator *(Area area, Velocity velocity)
        {
            // generator : MultiplyAlgebraGenerator.CreateCodeForRightFractionValue
            // scenario with hint
            // .Is<Area, Velocity, VolumeStream>("*")
            // hint location GetBasicOperatorHints, line 31
            var areaUnit = area.Unit;
            var velocityUnit = velocity.Unit;
            var tmp1 = velocityUnit.DenominatorUnit;
            var targetRightUnit = new VelocityUnit(areaUnit.GetLengthUnit(), tmp1);
            var resultUnit = new VolumeStreamUnit(areaUnit.GetVolumeUnit(), tmp1);
            var velocityConverted = velocity.ConvertTo(targetRightUnit);
            var value = area.Value * velocityConverted.Value;
            return new VolumeStream(value, resultUnit);
        }

        /// <summary>
        /// Multiplication operation
        /// </summary>
        /// <param name="velocity">left factor (multiplicand)</param>
        /// <param name="area">rigth factor (multiplier)</param>
        public static VolumeStream operator *(Velocity velocity, Area area)
        {
            // generator : MultiplyAlgebraGenerator.CreateCodeForLeftFractionValue
            // VolumeStream operator *(Velocity velocity, Area area)
            // scenario with hint
            // .Is<Velocity, Area, VolumeStream>("*")
            // hint location GetBasicOperatorHints, line 31
            var velocityUnit = velocity.Unit;
            var tmp1 = velocityUnit.CounterUnit;
            var resultUnit = new VolumeStreamUnit(tmp1.GetVolumeUnit(), velocityUnit.DenominatorUnit);
            var areaConverted = area.ConvertTo(tmp1.GetAreaUnit());
            var value = velocity.Value * areaConverted.Value;
            return new VolumeStream(value, resultUnit);
        }

        /// <summary>
        /// Multiplication operation
        /// </summary>
        /// <param name="area">left factor (multiplicand)</param>
        /// <param name="velocity">rigth factor (multiplier)</param>
        public static VolumeStream? operator *(Area? area, Velocity velocity)
        {
            // generator : MultiplyAlgebraGenerator.CreateCode
            if (area is null)
                return null;
            return area.Value * velocity;
        }

        /// <summary>
        /// Multiplication operation
        /// </summary>
        /// <param name="velocity">left factor (multiplicand)</param>
        /// <param name="area">rigth factor (multiplier)</param>
        public static VolumeStream? operator *(Velocity? velocity, Area area)
        {
            // generator : MultiplyAlgebraGenerator.CreateCode
            if (velocity is null)
                return null;
            return velocity.Value * area;
        }

        /// <summary>
        /// Multiplication operation
        /// </summary>
        /// <param name="area">left factor (multiplicand)</param>
        /// <param name="velocity">rigth factor (multiplier)</param>
        public static VolumeStream? operator *(Area area, Velocity? velocity)
        {
            // generator : MultiplyAlgebraGenerator.CreateCode
            if (velocity is null)
                return null;
            return area * velocity.Value;
        }

        /// <summary>
        /// Multiplication operation
        /// </summary>
        /// <param name="velocity">left factor (multiplicand)</param>
        /// <param name="area">rigth factor (multiplier)</param>
        public static VolumeStream? operator *(Velocity velocity, Area? area)
        {
            // generator : MultiplyAlgebraGenerator.CreateCode
            if (area is null)
                return null;
            return velocity * area.Value;
        }

        /// <summary>
        /// Multiplication operation
        /// </summary>
        /// <param name="area">left factor (multiplicand)</param>
        /// <param name="velocity">rigth factor (multiplier)</param>
        public static VolumeStream? operator *(Area? area, Velocity? velocity)
        {
            // generator : MultiplyAlgebraGenerator.CreateCode
            if (area is null || velocity is null)
                return null;
            return area.Value * velocity.Value;
        }

        /// <summary>
        /// Multiplication operation
        /// </summary>
        /// <param name="velocity">left factor (multiplicand)</param>
        /// <param name="area">rigth factor (multiplier)</param>
        public static VolumeStream? operator *(Velocity? velocity, Area? area)
        {
            // generator : MultiplyAlgebraGenerator.CreateCode
            if (velocity is null || area is null)
                return null;
            return velocity.Value * area.Value;
        }

        /// <summary>
        /// implements / operator
        /// </summary>
        /// <param name="value"></param>
        /// <param name="number"></param>
        public static Area operator /(Area value, decimal number)
        {
            return new Area(value.Value / number, value.Unit);
        }

        public static decimal operator /(Area left, Area right)
        {
            // generator : BasicUnitValuesGenerator.Add_Algebra_MulDiv
            right = right.ConvertTo(left.Unit);
            return left.Value / right.Value;
        }

        /// <summary>
        /// Division operation, calculates value dividend/divisor with unit that derives from dividend unit
        /// </summary>
        /// <param name="area">a dividend (counter) - a value that is being divided</param>
        /// <param name="length">a divisor (denominator) - a value which dividend is divided by</param>
        public static Length operator /(Area area, Length length)
        {
            // generator : MultiplyAlgebraGenerator.CreateCodeForRelatedUnits
            // scenario C
            var newUnit = GlobalUnitRegistry.Relations.GetOrThrow<AreaUnit, LengthUnit>(area.Unit);
            var lengthConverted = length.ConvertTo(newUnit);
            var value = area.Value / lengthConverted.Value;
            return new Length(value, newUnit);
        }

        /// <summary>
        /// Division operation, calculates value dividend/divisor with unit that derives from dividend unit
        /// </summary>
        /// <param name="area">a dividend (counter) - a value that is being divided</param>
        /// <param name="length">a divisor (denominator) - a value which dividend is divided by</param>
        public static Length? operator /(Area? area, Length length)
        {
            // generator : MultiplyAlgebraGenerator.CreateCode
            if (area is null)
                return null;
            return area.Value / length;
        }

        /// <summary>
        /// Division operation, calculates value dividend/divisor with unit that derives from dividend unit
        /// </summary>
        /// <param name="area">a dividend (counter) - a value that is being divided</param>
        /// <param name="length">a divisor (denominator) - a value which dividend is divided by</param>
        public static Length? operator /(Area area, Length? length)
        {
            // generator : MultiplyAlgebraGenerator.CreateCode
            if (length is null)
                return null;
            return area / length.Value;
        }

        /// <summary>
        /// Division operation, calculates value dividend/divisor with unit that derives from dividend unit
        /// </summary>
        /// <param name="area">a dividend (counter) - a value that is being divided</param>
        /// <param name="length">a divisor (denominator) - a value which dividend is divided by</param>
        public static Length? operator /(Area? area, Length? length)
        {
            // generator : MultiplyAlgebraGenerator.CreateCode
            if (area is null || length is null)
                return null;
            return area.Value / length.Value;
        }

        public static Area operator +(Area left, Area right)
        {
            // generator : BasicUnitValuesGenerator.Add_Algebra_PlusMinus
            if (left.Value.Equals(decimal.Zero) && string.IsNullOrEmpty(left.Unit?.UnitName))
                return right;
            if (right.Value.Equals(decimal.Zero) && string.IsNullOrEmpty(right.Unit?.UnitName))
                return left;
            right = right.ConvertTo(left.Unit);
            return new Area(left.Value + right.Value, left.Unit);
        }

        /// <summary>
        /// creates area from value in cmÂ²
        /// </summary>
        /// <param name="value">Area value in cmÂ²</param>
        public static Area FromSquareCentimeters(decimal value)
        {
            // generator : BasicUnitValuesGenerator.Add_FromMethods
            return new Area(value, AreaUnits.SquareCm);
        }

        /// <summary>
        /// creates area from value in cmÂ²
        /// </summary>
        /// <param name="value">Area value in cmÂ²</param>
        public static Area FromSquareCentimeters(double value)
        {
            // generator : BasicUnitValuesGenerator.Add_FromMethods
            return new Area((decimal)value, AreaUnits.SquareCm);
        }

        /// <summary>
        /// creates area from value in cmÂ²
        /// </summary>
        /// <param name="value">Area value in cmÂ²</param>
        public static Area FromSquareCentimeters(int value)
        {
            // generator : BasicUnitValuesGenerator.Add_FromMethods
            return new Area(value, AreaUnits.SquareCm);
        }

        /// <summary>
        /// creates area from value in cmÂ²
        /// </summary>
        /// <param name="value">Area value in cmÂ²</param>
        public static Area FromSquareCentimeters(long value)
        {
            // generator : BasicUnitValuesGenerator.Add_FromMethods
            return new Area(value, AreaUnits.SquareCm);
        }

        /// <summary>
        /// creates area from value in dmÂ²
        /// </summary>
        /// <param name="value">Area value in dmÂ²</param>
        public static Area FromSquareDecimeters(decimal value)
        {
            // generator : BasicUnitValuesGenerator.Add_FromMethods
            return new Area(value, AreaUnits.SquareDm);
        }

        /// <summary>
        /// creates area from value in dmÂ²
        /// </summary>
        /// <param name="value">Area value in dmÂ²</param>
        public static Area FromSquareDecimeters(double value)
        {
            // generator : BasicUnitValuesGenerator.Add_FromMethods
            return new Area((decimal)value, AreaUnits.SquareDm);
        }

        /// <summary>
        /// creates area from value in dmÂ²
        /// </summary>
        /// <param name="value">Area value in dmÂ²</param>
        public static Area FromSquareDecimeters(int value)
        {
            // generator : BasicUnitValuesGenerator.Add_FromMethods
            return new Area(value, AreaUnits.SquareDm);
        }

        /// <summary>
        /// creates area from value in dmÂ²
        /// </summary>
        /// <param name="value">Area value in dmÂ²</param>
        public static Area FromSquareDecimeters(long value)
        {
            // generator : BasicUnitValuesGenerator.Add_FromMethods
            return new Area(value, AreaUnits.SquareDm);
        }

        /// <summary>
        /// creates area from value in fhÂ²
        /// </summary>
        /// <param name="value">Area value in fhÂ²</param>
        public static Area FromSquareFathom(decimal value)
        {
            // generator : BasicUnitValuesGenerator.Add_FromMethods
            return new Area(value, AreaUnits.SquareFathom);
        }

        /// <summary>
        /// creates area from value in fhÂ²
        /// </summary>
        /// <param name="value">Area value in fhÂ²</param>
        public static Area FromSquareFathom(double value)
        {
            // generator : BasicUnitValuesGenerator.Add_FromMethods
            return new Area((decimal)value, AreaUnits.SquareFathom);
        }

        /// <summary>
        /// creates area from value in fhÂ²
        /// </summary>
        /// <param name="value">Area value in fhÂ²</param>
        public static Area FromSquareFathom(int value)
        {
            // generator : BasicUnitValuesGenerator.Add_FromMethods
            return new Area(value, AreaUnits.SquareFathom);
        }

        /// <summary>
        /// creates area from value in fhÂ²
        /// </summary>
        /// <param name="value">Area value in fhÂ²</param>
        public static Area FromSquareFathom(long value)
        {
            // generator : BasicUnitValuesGenerator.Add_FromMethods
            return new Area(value, AreaUnits.SquareFathom);
        }

        /// <summary>
        /// creates area from value in ftÂ²
        /// </summary>
        /// <param name="value">Area value in ftÂ²</param>
        public static Area FromSquareFoot(decimal value)
        {
            // generator : BasicUnitValuesGenerator.Add_FromMethods
            return new Area(value, AreaUnits.SquareFeet);
        }

        /// <summary>
        /// creates area from value in ftÂ²
        /// </summary>
        /// <param name="value">Area value in ftÂ²</param>
        public static Area FromSquareFoot(double value)
        {
            // generator : BasicUnitValuesGenerator.Add_FromMethods
            return new Area((decimal)value, AreaUnits.SquareFeet);
        }

        /// <summary>
        /// creates area from value in ftÂ²
        /// </summary>
        /// <param name="value">Area value in ftÂ²</param>
        public static Area FromSquareFoot(int value)
        {
            // generator : BasicUnitValuesGenerator.Add_FromMethods
            return new Area(value, AreaUnits.SquareFeet);
        }

        /// <summary>
        /// creates area from value in ftÂ²
        /// </summary>
        /// <param name="value">Area value in ftÂ²</param>
        public static Area FromSquareFoot(long value)
        {
            // generator : BasicUnitValuesGenerator.Add_FromMethods
            return new Area(value, AreaUnits.SquareFeet);
        }

        /// <summary>
        /// creates area from value in fgÂ²
        /// </summary>
        /// <param name="value">Area value in fgÂ²</param>
        public static Area FromSquareFurlongs(decimal value)
        {
            // generator : BasicUnitValuesGenerator.Add_FromMethods
            return new Area(value, AreaUnits.SquareFurlong);
        }

        /// <summary>
        /// creates area from value in fgÂ²
        /// </summary>
        /// <param name="value">Area value in fgÂ²</param>
        public static Area FromSquareFurlongs(double value)
        {
            // generator : BasicUnitValuesGenerator.Add_FromMethods
            return new Area((decimal)value, AreaUnits.SquareFurlong);
        }

        /// <summary>
        /// creates area from value in fgÂ²
        /// </summary>
        /// <param name="value">Area value in fgÂ²</param>
        public static Area FromSquareFurlongs(int value)
        {
            // generator : BasicUnitValuesGenerator.Add_FromMethods
            return new Area(value, AreaUnits.SquareFurlong);
        }

        /// <summary>
        /// creates area from value in fgÂ²
        /// </summary>
        /// <param name="value">Area value in fgÂ²</param>
        public static Area FromSquareFurlongs(long value)
        {
            // generator : BasicUnitValuesGenerator.Add_FromMethods
            return new Area(value, AreaUnits.SquareFurlong);
        }

        /// <summary>
        /// creates area from value in inchÂ²
        /// </summary>
        /// <param name="value">Area value in inchÂ²</param>
        public static Area FromSquareInches(decimal value)
        {
            // generator : BasicUnitValuesGenerator.Add_FromMethods
            return new Area(value, AreaUnits.SquareInch);
        }

        /// <summary>
        /// creates area from value in inchÂ²
        /// </summary>
        /// <param name="value">Area value in inchÂ²</param>
        public static Area FromSquareInches(double value)
        {
            // generator : BasicUnitValuesGenerator.Add_FromMethods
            return new Area((decimal)value, AreaUnits.SquareInch);
        }

        /// <summary>
        /// creates area from value in inchÂ²
        /// </summary>
        /// <param name="value">Area value in inchÂ²</param>
        public static Area FromSquareInches(int value)
        {
            // generator : BasicUnitValuesGenerator.Add_FromMethods
            return new Area(value, AreaUnits.SquareInch);
        }

        /// <summary>
        /// creates area from value in inchÂ²
        /// </summary>
        /// <param name="value">Area value in inchÂ²</param>
        public static Area FromSquareInches(long value)
        {
            // generator : BasicUnitValuesGenerator.Add_FromMethods
            return new Area(value, AreaUnits.SquareInch);
        }

        /// <summary>
        /// creates area from value in kmÂ²
        /// </summary>
        /// <param name="value">Area value in kmÂ²</param>
        public static Area FromSquareKilometers(decimal value)
        {
            // generator : BasicUnitValuesGenerator.Add_FromMethods
            return new Area(value, AreaUnits.SquareKm);
        }

        /// <summary>
        /// creates area from value in kmÂ²
        /// </summary>
        /// <param name="value">Area value in kmÂ²</param>
        public static Area FromSquareKilometers(double value)
        {
            // generator : BasicUnitValuesGenerator.Add_FromMethods
            return new Area((decimal)value, AreaUnits.SquareKm);
        }

        /// <summary>
        /// creates area from value in kmÂ²
        /// </summary>
        /// <param name="value">Area value in kmÂ²</param>
        public static Area FromSquareKilometers(int value)
        {
            // generator : BasicUnitValuesGenerator.Add_FromMethods
            return new Area(value, AreaUnits.SquareKm);
        }

        /// <summary>
        /// creates area from value in kmÂ²
        /// </summary>
        /// <param name="value">Area value in kmÂ²</param>
        public static Area FromSquareKilometers(long value)
        {
            // generator : BasicUnitValuesGenerator.Add_FromMethods
            return new Area(value, AreaUnits.SquareKm);
        }

        /// <summary>
        /// creates area from value in mÂ²
        /// </summary>
        /// <param name="value">Area value in mÂ²</param>
        public static Area FromSquareMeter(decimal value)
        {
            // generator : BasicUnitValuesGenerator.Add_FromMethods
            return new Area(value, AreaUnits.SquareMeter);
        }

        /// <summary>
        /// creates area from value in mÂ²
        /// </summary>
        /// <param name="value">Area value in mÂ²</param>
        public static Area FromSquareMeter(double value)
        {
            // generator : BasicUnitValuesGenerator.Add_FromMethods
            return new Area((decimal)value, AreaUnits.SquareMeter);
        }

        /// <summary>
        /// creates area from value in mÂ²
        /// </summary>
        /// <param name="value">Area value in mÂ²</param>
        public static Area FromSquareMeter(int value)
        {
            // generator : BasicUnitValuesGenerator.Add_FromMethods
            return new Area(value, AreaUnits.SquareMeter);
        }

        /// <summary>
        /// creates area from value in mÂ²
        /// </summary>
        /// <param name="value">Area value in mÂ²</param>
        public static Area FromSquareMeter(long value)
        {
            // generator : BasicUnitValuesGenerator.Add_FromMethods
            return new Area(value, AreaUnits.SquareMeter);
        }

        /// <summary>
        /// creates area from value in milÂ²
        /// </summary>
        /// <param name="value">Area value in milÂ²</param>
        public static Area FromSquareMiles(decimal value)
        {
            // generator : BasicUnitValuesGenerator.Add_FromMethods
            return new Area(value, AreaUnits.SquareMile);
        }

        /// <summary>
        /// creates area from value in milÂ²
        /// </summary>
        /// <param name="value">Area value in milÂ²</param>
        public static Area FromSquareMiles(double value)
        {
            // generator : BasicUnitValuesGenerator.Add_FromMethods
            return new Area((decimal)value, AreaUnits.SquareMile);
        }

        /// <summary>
        /// creates area from value in milÂ²
        /// </summary>
        /// <param name="value">Area value in milÂ²</param>
        public static Area FromSquareMiles(int value)
        {
            // generator : BasicUnitValuesGenerator.Add_FromMethods
            return new Area(value, AreaUnits.SquareMile);
        }

        /// <summary>
        /// creates area from value in milÂ²
        /// </summary>
        /// <param name="value">Area value in milÂ²</param>
        public static Area FromSquareMiles(long value)
        {
            // generator : BasicUnitValuesGenerator.Add_FromMethods
            return new Area(value, AreaUnits.SquareMile);
        }

        /// <summary>
        /// creates area from value in mmÂ²
        /// </summary>
        /// <param name="value">Area value in mmÂ²</param>
        public static Area FromSquareMilimeters(decimal value)
        {
            // generator : BasicUnitValuesGenerator.Add_FromMethods
            return new Area(value, AreaUnits.SquareMm);
        }

        /// <summary>
        /// creates area from value in mmÂ²
        /// </summary>
        /// <param name="value">Area value in mmÂ²</param>
        public static Area FromSquareMilimeters(double value)
        {
            // generator : BasicUnitValuesGenerator.Add_FromMethods
            return new Area((decimal)value, AreaUnits.SquareMm);
        }

        /// <summary>
        /// creates area from value in mmÂ²
        /// </summary>
        /// <param name="value">Area value in mmÂ²</param>
        public static Area FromSquareMilimeters(int value)
        {
            // generator : BasicUnitValuesGenerator.Add_FromMethods
            return new Area(value, AreaUnits.SquareMm);
        }

        /// <summary>
        /// creates area from value in mmÂ²
        /// </summary>
        /// <param name="value">Area value in mmÂ²</param>
        public static Area FromSquareMilimeters(long value)
        {
            // generator : BasicUnitValuesGenerator.Add_FromMethods
            return new Area(value, AreaUnits.SquareMm);
        }

        /// <summary>
        /// creates area from value in nmÂ²
        /// </summary>
        /// <param name="value">Area value in nmÂ²</param>
        public static Area FromSquareNauticalMiles(decimal value)
        {
            // generator : BasicUnitValuesGenerator.Add_FromMethods
            return new Area(value, AreaUnits.SquareNauticalMile);
        }

        /// <summary>
        /// creates area from value in nmÂ²
        /// </summary>
        /// <param name="value">Area value in nmÂ²</param>
        public static Area FromSquareNauticalMiles(double value)
        {
            // generator : BasicUnitValuesGenerator.Add_FromMethods
            return new Area((decimal)value, AreaUnits.SquareNauticalMile);
        }

        /// <summary>
        /// creates area from value in nmÂ²
        /// </summary>
        /// <param name="value">Area value in nmÂ²</param>
        public static Area FromSquareNauticalMiles(int value)
        {
            // generator : BasicUnitValuesGenerator.Add_FromMethods
            return new Area(value, AreaUnits.SquareNauticalMile);
        }

        /// <summary>
        /// creates area from value in nmÂ²
        /// </summary>
        /// <param name="value">Area value in nmÂ²</param>
        public static Area FromSquareNauticalMiles(long value)
        {
            // generator : BasicUnitValuesGenerator.Add_FromMethods
            return new Area(value, AreaUnits.SquareNauticalMile);
        }

        /// <summary>
        /// creates area from value in ydÂ²
        /// </summary>
        /// <param name="value">Area value in ydÂ²</param>
        public static Area FromSquareYards(decimal value)
        {
            // generator : BasicUnitValuesGenerator.Add_FromMethods
            return new Area(value, AreaUnits.SquareYard);
        }

        /// <summary>
        /// creates area from value in ydÂ²
        /// </summary>
        /// <param name="value">Area value in ydÂ²</param>
        public static Area FromSquareYards(double value)
        {
            // generator : BasicUnitValuesGenerator.Add_FromMethods
            return new Area((decimal)value, AreaUnits.SquareYard);
        }

        /// <summary>
        /// creates area from value in ydÂ²
        /// </summary>
        /// <param name="value">Area value in ydÂ²</param>
        public static Area FromSquareYards(int value)
        {
            // generator : BasicUnitValuesGenerator.Add_FromMethods
            return new Area(value, AreaUnits.SquareYard);
        }

        /// <summary>
        /// creates area from value in ydÂ²
        /// </summary>
        /// <param name="value">Area value in ydÂ²</param>
        public static Area FromSquareYards(long value)
        {
            // generator : BasicUnitValuesGenerator.Add_FromMethods
            return new Area(value, AreaUnits.SquareYard);
        }

        public static Area Parse(string value)
        {
            // generator : BasicUnitValuesGenerator.Add_Parse
            var parseResult = CommonParse.Parse(value, typeof(Area));
            if (string.IsNullOrEmpty(parseResult.UnitName))
                return new Area(parseResult.Value, Area.BaseUnit);
            return new Area(parseResult.Value, new AreaUnit(parseResult.UnitName));
        }

        /// <summary>
        /// value
        /// </summary>
        public decimal Value { get; }

        /// <summary>
        /// unit
        /// </summary>
        [JetBrains.Annotations.NotNull]
        public AreaUnit Unit
        {
            get { return _unit ?? BaseUnit; }
        }

        private AreaUnit _unit;

        public static readonly AreaUnit BaseUnit = AreaUnits.SquareMeter;

        public static readonly Area Zero = new Area(0, BaseUnit);

    }

    public static partial class AreaExtensions
    {
        public static Area Sum(this IEnumerable<Area> items)
        {
            if (items is null)
                return Area.Zero;
            var c = items.ToArray();
            if (c.Length == 0)
                return Area.Zero;
            if (c.Length == 1)
                return c[0];
            var unit  = c[0].Unit;
            var value = c.Aggregate(0m, (x, y) => x + y.ConvertTo(unit).Value);
            return new Area(value, unit);
        }

        public static Area Sum(this IEnumerable<Area?> items)
        {
            if (items is null)
                return Area.Zero;
            return items.Where(a => a != null).Select(a => a.Value).Sum();
        }

        public static Area Sum<T>(this IEnumerable<T> items, Func<T, Area> map)
        {
            if (items is null)
                return Area.Zero;
            return items.Select(map).Sum();
        }

    }

    public partial class AreaJsonConverter : AbstractUnitJsonConverter<Area, AreaUnit>
    {
        protected override Area Make(decimal value, string unit)
        {
            unit = unit?.Trim();
            return new Area(value, string.IsNullOrEmpty(unit) ? Area.BaseUnit : new AreaUnit(unit));
        }

        protected override Area Parse(string txt)
        {
            return Area.Parse(txt);
        }

    }
}
