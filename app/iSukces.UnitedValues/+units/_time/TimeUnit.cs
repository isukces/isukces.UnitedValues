using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using JetBrains.Annotations;

namespace iSukces.UnitedValues;

// -----===== autogenerated code =====-----
// ReSharper disable All
// generator: BasicUnitGenerator, DerivedUnitGenerator
[Serializable]
public partial class TimeUnit : IUnit, IEquatable<TimeUnit>
{
    /// <summary>
    /// creates instance of TimeUnit
    /// </summary>
    /// <param name="unitName">name of unit</param>
    public TimeUnit(string unitName)
    {
        if (unitName is null)
            throw new NullReferenceException(nameof(unitName));
        unitName = unitName.Trim();
        if (unitName.Length == 0)
            throw new ArgumentException(nameof(unitName));
        UnitName = unitName;
    }

    public bool Equals(TimeUnit? other)
    {
        return String.Equals(UnitName, other?.UnitName);
    }

    public override bool Equals(object? obj) => obj is TimeUnit tmp && Equals(tmp);

    public override int GetHashCode()
    {
        return UnitName?.GetHashCode() ?? 0;
    }

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    [RelatedUnitSource(RelatedUnitSourceUsage.ProvidesRelatedUnit, 10)]
    public SquareTimeUnit GetSquareTimeUnit()
    {
        // generator : BasicUnitGenerator.Add_ConvertOtherPower
        return GlobalUnitRegistry.Relations.GetOrThrow<TimeUnit, SquareTimeUnit>(this);
    }

    /// <summary>
    /// Returns unit name
    /// </summary>
    public override string ToString()
    {
        return UnitName;
    }

    bool IEquatable<TimeUnit>.Equals(TimeUnit other)
    {
        return Equals(other);
    }

    /// <summary>
    /// Inequality operator
    /// </summary>
    /// <param name="left">first value to compare</param>
    /// <param name="right">second value to compare</param>
    public static bool operator !=(TimeUnit left, TimeUnit right)
    {
        return !left.Equals(right);
    }

    /// <summary>
    /// Equality operator
    /// </summary>
    /// <param name="left">first value to compare</param>
    /// <param name="right">second value to compare</param>
    public static bool operator ==(TimeUnit left, TimeUnit right)
    {
        return left.Equals(right);
    }

    /// <summary>
    /// Converts UnitDefinition&lt;TimeUnit&gt; into TimeUnit implicitly.
    /// </summary>
    /// <param name="src"></param>
    public static implicit operator TimeUnit(UnitDefinition<TimeUnit> src)
    {
        return src.Unit;
    }

    /// <summary>
    /// name of unit
    /// </summary>
    public string UnitName { get; }

}

[UnitsContainer]
public static partial class TimeUnits
{
    public static void RegisterUnitExchangeFactors(UnitExchangeFactors factors)
    {
        factors.RegisterMany(All);
    }

    public static TimeUnit TryRecoverUnitFromName([JetBrains.Annotations.NotNull] string unitName)
    {
        // generator : DerivedUnitGenerator.Add_TryRecoverUnitFromName
        if (unitName is null)
            throw new NullReferenceException(nameof(unitName));
        unitName = unitName.Trim();
        if (unitName.Length == 0)
            throw new ArgumentException(nameof(unitName));
        foreach (var i in All)
        {
            if (unitName == i.UnitName)
                return i.Unit;
        }
        return new TimeUnit(unitName);
    }

    /// <summary>
    /// All known time units
    /// </summary>
    public static IReadOnlyList<UnitDefinition<TimeUnit>> All
    {
        get
        {
            return new []
            {
                MiliSecond,
                Second,
                Minute,
                Hour,
                Year
            };
        }
    }

    internal static readonly TimeUnit MiliSecondTimeUnit = new TimeUnit("ms");

    public static readonly UnitDefinition<TimeUnit> MiliSecond = new UnitDefinition<TimeUnit>(MiliSecondTimeUnit, 0.001m);

    internal static readonly TimeUnit SecondTimeUnit = new TimeUnit("s");

    public static readonly UnitDefinition<TimeUnit> Second = new UnitDefinition<TimeUnit>(SecondTimeUnit, 1m);

    internal static readonly TimeUnit MinuteTimeUnit = new TimeUnit("min");

    public static readonly UnitDefinition<TimeUnit> Minute = new UnitDefinition<TimeUnit>(MinuteTimeUnit, 60m);

    internal static readonly TimeUnit HourTimeUnit = new TimeUnit("h");

    public static readonly UnitDefinition<TimeUnit> Hour = new UnitDefinition<TimeUnit>(HourTimeUnit, 3600m);

    internal static readonly TimeUnit YearTimeUnit = new TimeUnit("y");

    public static readonly UnitDefinition<TimeUnit> Year = new UnitDefinition<TimeUnit>(YearTimeUnit, 31556925.993600m);

}
