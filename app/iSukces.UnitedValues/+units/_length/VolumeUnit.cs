using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using JetBrains.Annotations;

namespace iSukces.UnitedValues;

// -----===== autogenerated code =====-----
// ReSharper disable All
// generator: BasicUnitGenerator, DerivedUnitGenerator
[Serializable]
public partial class VolumeUnit : IUnit, IEquatable<VolumeUnit>, IDecomposableUnit, IDerivedDecomposableUnit
{
    /// <summary>
    /// creates instance of VolumeUnit
    /// </summary>
    /// <param name="unitName">name of unit</param>
    public VolumeUnit(string unitName)
    {
        if (unitName is null)
            throw new NullReferenceException(nameof(unitName));
        unitName = unitName.Trim();
        if (unitName.Length == 0)
            throw new ArgumentException(nameof(unitName));
        UnitName = unitName?.Replace('3', '³');
    }

    /// <summary>
    /// creates instance of VolumeUnit
    /// </summary>
    /// <param name="baseUnit">based on</param>
    /// <param name="unitName">name of unit</param>
    public VolumeUnit(LengthUnit baseUnit, string unitName = null)
    {
        if (baseUnit is null)
            throw new NullReferenceException(nameof(baseUnit));
        BaseUnit = baseUnit;
        unitName = unitName?.Trim();
        UnitName = string.IsNullOrEmpty(unitName) ? baseUnit.UnitName + "³" : unitName;
    }

    public IReadOnlyList<DecomposableUnitItem> Decompose()
    {
        // generator : BasicUnitGenerator.Add_Decompose
        return new[] { GetBasicUnit() };
    }

    public bool Equals(VolumeUnit? other)
    {
        return String.Equals(UnitName, other?.UnitName);
    }

    public override bool Equals(object? obj) => obj is VolumeUnit tmp && Equals(tmp);

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    [RelatedUnitSource(RelatedUnitSourceUsage.ProvidesRelatedUnit, 10)]
    public AreaUnit GetAreaUnit()
    {
        // generator : BasicUnitGenerator.Add_ConvertOtherPower
        return GlobalUnitRegistry.Relations.GetOrThrow<VolumeUnit, AreaUnit>(this);
    }

    public DecomposableUnitItem GetBasicUnit()
    {
        // generator : BasicUnitGenerator.Add_Decompose
        var tmp = GetLengthUnit();
        return new DecomposableUnitItem(tmp, 3);
    }

    public override int GetHashCode()
    {
        return UnitName?.GetHashCode() ?? 0;
    }

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    [RelatedUnitSource(RelatedUnitSourceUsage.ProvidesRelatedUnit, 10)]
    public LengthUnit GetLengthUnit()
    {
        // generator : BasicUnitGenerator.Add_ConvertOtherPower
        return GlobalUnitRegistry.Relations.GetOrThrow<VolumeUnit, LengthUnit>(this);
    }

    /// <summary>
    /// Returns unit name
    /// </summary>
    public override string ToString()
    {
        return UnitName;
    }

    bool IEquatable<VolumeUnit>.Equals(VolumeUnit other)
    {
        return Equals(other);
    }

    /// <summary>
    /// Inequality operator
    /// </summary>
    /// <param name="left">first value to compare</param>
    /// <param name="right">second value to compare</param>
    public static bool operator !=(VolumeUnit left, VolumeUnit right)
    {
        return !left.Equals(right);
    }

    /// <summary>
    /// Equality operator
    /// </summary>
    /// <param name="left">first value to compare</param>
    /// <param name="right">second value to compare</param>
    public static bool operator ==(VolumeUnit left, VolumeUnit right)
    {
        return left.Equals(right);
    }

    /// <summary>
    /// Converts UnitDefinition&lt;VolumeUnit&gt; into VolumeUnit implicitly.
    /// </summary>
    /// <param name="src"></param>
    public static implicit operator VolumeUnit(UnitDefinition<VolumeUnit> src)
    {
        return src.Unit;
    }

    /// <summary>
    /// name of unit
    /// </summary>
    public string UnitName { get; }

    /// <summary>
    /// based on
    /// </summary>
    [RelatedUnitSource(RelatedUnitSourceUsage.DoNotUse)]
    public LengthUnit BaseUnit { get; }

}

[UnitsContainer]
public static partial class VolumeUnits
{
    public static void RegisterUnitExchangeFactors(UnitExchangeFactors factors)
    {
        factors.RegisterMany(All);
    }

    public static VolumeUnit TryRecoverUnitFromName([JetBrains.Annotations.NotNull] string unitName)
    {
        // generator : DerivedUnitGenerator.Add_TryRecoverUnitFromName
        if (unitName is null)
            throw new NullReferenceException(nameof(unitName));
        unitName = unitName.Trim();
        if (unitName.Length == 0)
            throw new ArgumentException(nameof(unitName));
        foreach (var i in All)
        {
            if (unitName == i.UnitName)
                return i.Unit;
        }
        return new VolumeUnit(unitName);
    }

    internal static void Register(UnitRelationsDictionary dict)
    {
        dict.AddRelated<VolumeUnit, LengthUnit>(CubicMeter, LengthUnits.Meter);
        dict.AddRelated<LengthUnit, VolumeUnit>(LengthUnits.Meter, CubicMeter);
        dict.AddRelated<VolumeUnit, LengthUnit>(CubicKm, LengthUnits.Km);
        dict.AddRelated<LengthUnit, VolumeUnit>(LengthUnits.Km, CubicKm);
        dict.AddRelated<VolumeUnit, LengthUnit>(CubicDm, LengthUnits.Dm);
        dict.AddRelated<LengthUnit, VolumeUnit>(LengthUnits.Dm, CubicDm);
        dict.AddRelated<VolumeUnit, LengthUnit>(CubicCm, LengthUnits.Cm);
        dict.AddRelated<LengthUnit, VolumeUnit>(LengthUnits.Cm, CubicCm);
        dict.AddRelated<VolumeUnit, LengthUnit>(CubicMm, LengthUnits.Mm);
        dict.AddRelated<LengthUnit, VolumeUnit>(LengthUnits.Mm, CubicMm);
        dict.AddRelated<VolumeUnit, LengthUnit>(CubicInch, LengthUnits.Inch);
        dict.AddRelated<LengthUnit, VolumeUnit>(LengthUnits.Inch, CubicInch);
        dict.AddRelated<VolumeUnit, LengthUnit>(CubicFeet, LengthUnits.Feet);
        dict.AddRelated<LengthUnit, VolumeUnit>(LengthUnits.Feet, CubicFeet);
        dict.AddRelated<VolumeUnit, LengthUnit>(CubicYard, LengthUnits.Yard);
        dict.AddRelated<LengthUnit, VolumeUnit>(LengthUnits.Yard, CubicYard);
        dict.AddRelated<VolumeUnit, LengthUnit>(CubicFurlong, LengthUnits.Furlong);
        dict.AddRelated<LengthUnit, VolumeUnit>(LengthUnits.Furlong, CubicFurlong);
        dict.AddRelated<VolumeUnit, LengthUnit>(CubicFathom, LengthUnits.Fathom);
        dict.AddRelated<LengthUnit, VolumeUnit>(LengthUnits.Fathom, CubicFathom);
        dict.AddRelated<VolumeUnit, LengthUnit>(CubicMile, LengthUnits.Mile);
        dict.AddRelated<LengthUnit, VolumeUnit>(LengthUnits.Mile, CubicMile);
        dict.AddRelated<VolumeUnit, LengthUnit>(CubicNauticalMile, LengthUnits.NauticalMile);
        dict.AddRelated<LengthUnit, VolumeUnit>(LengthUnits.NauticalMile, CubicNauticalMile);
        dict.AddRelated<VolumeUnit, AreaUnit>(CubicMeter, AreaUnits.SquareMeter);
        dict.AddRelated<AreaUnit, VolumeUnit>(AreaUnits.SquareMeter, CubicMeter);
        dict.AddRelated<VolumeUnit, AreaUnit>(CubicKm, AreaUnits.SquareKm);
        dict.AddRelated<AreaUnit, VolumeUnit>(AreaUnits.SquareKm, CubicKm);
        dict.AddRelated<VolumeUnit, AreaUnit>(CubicDm, AreaUnits.SquareDm);
        dict.AddRelated<AreaUnit, VolumeUnit>(AreaUnits.SquareDm, CubicDm);
        dict.AddRelated<VolumeUnit, AreaUnit>(CubicCm, AreaUnits.SquareCm);
        dict.AddRelated<AreaUnit, VolumeUnit>(AreaUnits.SquareCm, CubicCm);
        dict.AddRelated<VolumeUnit, AreaUnit>(CubicMm, AreaUnits.SquareMm);
        dict.AddRelated<AreaUnit, VolumeUnit>(AreaUnits.SquareMm, CubicMm);
        dict.AddRelated<VolumeUnit, AreaUnit>(CubicInch, AreaUnits.SquareInch);
        dict.AddRelated<AreaUnit, VolumeUnit>(AreaUnits.SquareInch, CubicInch);
        dict.AddRelated<VolumeUnit, AreaUnit>(CubicFeet, AreaUnits.SquareFeet);
        dict.AddRelated<AreaUnit, VolumeUnit>(AreaUnits.SquareFeet, CubicFeet);
        dict.AddRelated<VolumeUnit, AreaUnit>(CubicYard, AreaUnits.SquareYard);
        dict.AddRelated<AreaUnit, VolumeUnit>(AreaUnits.SquareYard, CubicYard);
        dict.AddRelated<VolumeUnit, AreaUnit>(CubicFurlong, AreaUnits.SquareFurlong);
        dict.AddRelated<AreaUnit, VolumeUnit>(AreaUnits.SquareFurlong, CubicFurlong);
        dict.AddRelated<VolumeUnit, AreaUnit>(CubicFathom, AreaUnits.SquareFathom);
        dict.AddRelated<AreaUnit, VolumeUnit>(AreaUnits.SquareFathom, CubicFathom);
        dict.AddRelated<VolumeUnit, AreaUnit>(CubicMile, AreaUnits.SquareMile);
        dict.AddRelated<AreaUnit, VolumeUnit>(AreaUnits.SquareMile, CubicMile);
        dict.AddRelated<VolumeUnit, AreaUnit>(CubicNauticalMile, AreaUnits.SquareNauticalMile);
        dict.AddRelated<AreaUnit, VolumeUnit>(AreaUnits.SquareNauticalMile, CubicNauticalMile);
    }

    /// <summary>
    /// All known volume units
    /// </summary>
    public static IReadOnlyList<UnitDefinition<VolumeUnit>> All
    {
        get
        {
            return new []
            {
                CubicMeter,
                CubicKm,
                CubicDm,
                CubicCm,
                CubicMm,
                CubicInch,
                CubicFeet,
                CubicYard,
                CubicFurlong,
                CubicFathom,
                CubicMile,
                CubicNauticalMile
            };
        }
    }

    internal static readonly VolumeUnit CubicMeterVolumeUnit = new VolumeUnit(LengthUnits.Meter);

    public static readonly UnitDefinition<VolumeUnit> CubicMeter = new UnitDefinition<VolumeUnit>(CubicMeterVolumeUnit, 1m);

    internal static readonly VolumeUnit CubicKmVolumeUnit = new VolumeUnit(LengthUnits.Km);

    public static readonly UnitDefinition<VolumeUnit> CubicKm = new UnitDefinition<VolumeUnit>(CubicKmVolumeUnit, 1000m * 1000m * 1000m);

    internal static readonly VolumeUnit CubicDmVolumeUnit = new VolumeUnit(LengthUnits.Dm);

    public static readonly UnitDefinition<VolumeUnit> CubicDm = new UnitDefinition<VolumeUnit>(CubicDmVolumeUnit, 0.1m * 0.1m * 0.1m);

    internal static readonly VolumeUnit CubicCmVolumeUnit = new VolumeUnit(LengthUnits.Cm);

    public static readonly UnitDefinition<VolumeUnit> CubicCm = new UnitDefinition<VolumeUnit>(CubicCmVolumeUnit, 0.01m * 0.01m * 0.01m);

    internal static readonly VolumeUnit CubicMmVolumeUnit = new VolumeUnit(LengthUnits.Mm);

    public static readonly UnitDefinition<VolumeUnit> CubicMm = new UnitDefinition<VolumeUnit>(CubicMmVolumeUnit, 0.001m * 0.001m * 0.001m);

    internal static readonly VolumeUnit CubicInchVolumeUnit = new VolumeUnit(LengthUnits.Inch);

    public static readonly UnitDefinition<VolumeUnit> CubicInch = new UnitDefinition<VolumeUnit>(CubicInchVolumeUnit, 0.0254m * 0.0254m * 0.0254m);

    internal static readonly VolumeUnit CubicFeetVolumeUnit = new VolumeUnit(LengthUnits.Feet);

    public static readonly UnitDefinition<VolumeUnit> CubicFeet = new UnitDefinition<VolumeUnit>(CubicFeetVolumeUnit, 0.3048m * 0.3048m * 0.3048m);

    internal static readonly VolumeUnit CubicYardVolumeUnit = new VolumeUnit(LengthUnits.Yard);

    public static readonly UnitDefinition<VolumeUnit> CubicYard = new UnitDefinition<VolumeUnit>(CubicYardVolumeUnit, 0.9144m * 0.9144m * 0.9144m);

    internal static readonly VolumeUnit CubicFurlongVolumeUnit = new VolumeUnit(LengthUnits.Furlong);

    public static readonly UnitDefinition<VolumeUnit> CubicFurlong = new UnitDefinition<VolumeUnit>(CubicFurlongVolumeUnit, 201.1680m * 201.1680m * 201.1680m);

    internal static readonly VolumeUnit CubicFathomVolumeUnit = new VolumeUnit(LengthUnits.Fathom);

    public static readonly UnitDefinition<VolumeUnit> CubicFathom = new UnitDefinition<VolumeUnit>(CubicFathomVolumeUnit, 1.8288m * 1.8288m * 1.8288m);

    internal static readonly VolumeUnit CubicMileVolumeUnit = new VolumeUnit(LengthUnits.Mile);

    public static readonly UnitDefinition<VolumeUnit> CubicMile = new UnitDefinition<VolumeUnit>(CubicMileVolumeUnit, 1609.344m * 1609.344m * 1609.344m);

    internal static readonly VolumeUnit CubicNauticalMileVolumeUnit = new VolumeUnit(LengthUnits.NauticalMile);

    public static readonly UnitDefinition<VolumeUnit> CubicNauticalMile = new UnitDefinition<VolumeUnit>(CubicNauticalMileVolumeUnit, 1852m * 1852m * 1852m);

}
