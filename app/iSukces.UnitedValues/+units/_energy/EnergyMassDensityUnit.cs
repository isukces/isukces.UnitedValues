using System;
using System.Collections.Generic;

// -----===== autogenerated code =====-----
// ReSharper disable All
// generator: FractionUnitGenerator, DerivedUnitGenerator
// suggestion: File scope namespace is possible, use [AssumeDefinedNamespace]
namespace iSukces.UnitedValues
{
    public sealed partial class EnergyMassDensityUnit : IFractionalUnit<EnergyUnit, MassUnit>, IEquatable<EnergyMassDensityUnit>, IDecomposableUnit
    {
        /// <summary>
        /// creates instance of EnergyMassDensityUnit
        /// </summary>
        /// <param name="counterUnit">counter unit</param>
        /// <param name="denominatorUnit">denominator unit</param>
        public EnergyMassDensityUnit(EnergyUnit counterUnit, MassUnit denominatorUnit)
        {
            CounterUnit = counterUnit;
            DenominatorUnit = denominatorUnit;
        }

        public IReadOnlyList<DecomposableUnitItem> Decompose()
        {
            // generator : FractionUnitGenerator.Add_Decompose
            return new []
            {
                new DecomposableUnitItem(CounterUnit, 1),
                new DecomposableUnitItem(DenominatorUnit, -1)
            };
            /*
            var decomposer = new UnitDecomposer();
            decomposer.Add(CounterUnit, 1);
            decomposer.Add(DenominatorUnit, -1);
            return decomposer.Items;
            */
        }

        public bool Equals(EnergyMassDensityUnit other)
        {
            return CounterUnit.Equals(other.CounterUnit) && DenominatorUnit.Equals(other.DenominatorUnit);
        }

        public override bool Equals(object other)
        {
            return other is EnergyMassDensityUnit unitedValue ? Equals(unitedValue) : false;
        }

        public override int GetHashCode()
        {
            unchecked
            {
                return (CounterUnit.GetHashCode() * 397) ^ DenominatorUnit.GetHashCode();
            }
        }

        /// <summary>
        /// Returns unit name
        /// </summary>
        public override string ToString()
        {
            return UnitName;
        }

        public EnergyMassDensityUnit WithCounterUnit(EnergyUnit newUnit)
        {
            // generator : FractionUnitGenerator.Add_WithSecond
            return new EnergyMassDensityUnit(newUnit, DenominatorUnit);
        }

        public EnergyMassDensityUnit WithDenominatorUnit(MassUnit newUnit)
        {
            // generator : FractionUnitGenerator.Add_WithFirst
            return new EnergyMassDensityUnit(CounterUnit, newUnit);
        }

        /// <summary>
        /// Inequality operator
        /// </summary>
        /// <param name="left">first value to compare</param>
        /// <param name="right">second value to compare</param>
        public static bool operator !=(EnergyMassDensityUnit left, EnergyMassDensityUnit right)
        {
            return !left.Equals(right);
        }

        /// <summary>
        /// Equality operator
        /// </summary>
        /// <param name="left">first value to compare</param>
        /// <param name="right">second value to compare</param>
        public static bool operator ==(EnergyMassDensityUnit left, EnergyMassDensityUnit right)
        {
            return left.Equals(right);
        }

        /// <summary>
        /// counter unit
        /// </summary>
        public EnergyUnit CounterUnit { get; }

        /// <summary>
        /// denominator unit
        /// </summary>
        public MassUnit DenominatorUnit { get; }

        public string UnitName
        {
            get { return CounterUnit.UnitName + "/" + DenominatorUnit.UnitName; }
        }

    }

    [UnitsContainer]
    public static partial class EnergyMassDensityUnits
    {
        public static void RegisterUnitExchangeFactors(UnitExchangeFactors factors)
        {
            factors.RegisterMany(All);
        }

        public static EnergyMassDensityUnit TryRecoverUnitFromName([JetBrains.Annotations.NotNull] string unitName)
        {
            // generator : DerivedUnitGenerator.Add_TryRecoverUnitFromName
            if (unitName is null)
                throw new NullReferenceException(nameof(unitName));
            unitName = unitName.Trim();
            if (unitName.Length == 0)
                throw new ArgumentException(nameof(unitName));
            foreach (var i in All)
            {
                if (unitName == i.UnitName)
                    return i.Unit;
            }
            // try to split
            var parts = unitName.Split('/');
            if (parts.Length == 2)
            {
                var counterUnit = EnergyUnits.TryRecoverUnitFromName(parts[0]);
                var denominatorUnit = MassUnits.TryRecoverUnitFromName(parts[1]);
                return new EnergyMassDensityUnit(counterUnit, denominatorUnit);
            }
            throw new ArgumentException(nameof(unitName));
        }

        /// <summary>
        /// All known energyMassDensity units
        /// </summary>
        public static IReadOnlyList<UnitDefinition<EnergyMassDensityUnit>> All
        {
            get
            {
                return new []
                {
                    KiloJoulePerKg,
                    MegaJoulePerKg,
                    MegaJoulePerTone,
                    GigaJoulePerTone,
                    KiloWattHourPerTone
                };
            }
        }

        internal static readonly EnergyMassDensityUnit KiloJoulePerKgEnergyMassDensityUnit = new EnergyMassDensityUnit(EnergyUnits.KiloJoule, MassUnits.Kg);

        public static readonly UnitDefinition<EnergyMassDensityUnit> KiloJoulePerKg = new UnitDefinition<EnergyMassDensityUnit>(KiloJoulePerKgEnergyMassDensityUnit, 1000m);

        internal static readonly EnergyMassDensityUnit MegaJoulePerKgEnergyMassDensityUnit = new EnergyMassDensityUnit(EnergyUnits.MegaJoule, MassUnits.Kg);

        public static readonly UnitDefinition<EnergyMassDensityUnit> MegaJoulePerKg = new UnitDefinition<EnergyMassDensityUnit>(MegaJoulePerKgEnergyMassDensityUnit, 1000000m);

        internal static readonly EnergyMassDensityUnit MegaJoulePerToneEnergyMassDensityUnit = new EnergyMassDensityUnit(EnergyUnits.MegaJoule, MassUnits.Tone);

        public static readonly UnitDefinition<EnergyMassDensityUnit> MegaJoulePerTone = new UnitDefinition<EnergyMassDensityUnit>(MegaJoulePerToneEnergyMassDensityUnit, 1000m);

        internal static readonly EnergyMassDensityUnit GigaJoulePerToneEnergyMassDensityUnit = new EnergyMassDensityUnit(EnergyUnits.GigaJoule, MassUnits.Tone);

        public static readonly UnitDefinition<EnergyMassDensityUnit> GigaJoulePerTone = new UnitDefinition<EnergyMassDensityUnit>(GigaJoulePerToneEnergyMassDensityUnit, 1000000m);

        internal static readonly EnergyMassDensityUnit KiloWattHourPerToneEnergyMassDensityUnit = new EnergyMassDensityUnit(EnergyUnits.KiloWattHour, MassUnits.Tone);

        public static readonly UnitDefinition<EnergyMassDensityUnit> KiloWattHourPerTone = new UnitDefinition<EnergyMassDensityUnit>(KiloWattHourPerToneEnergyMassDensityUnit, 3600m);

    }
}
