using System;
using System.Collections.Generic;
using JetBrains.Annotations;

namespace iSukces.UnitedValues;

// -----===== autogenerated code =====-----
// ReSharper disable All
// generator: InversedUnitGenerator, InversedUnitContainerGenerator
[Serializable]
public partial class InversedKelvinTemperatureUnit : IUnit, IEquatable<InversedKelvinTemperatureUnit>, IDerivedDecomposableUnit
{
    /// <summary>
    /// creates instance of InversedKelvinTemperatureUnit
    /// </summary>
    /// <param name="unitName">name of unit</param>
    public InversedKelvinTemperatureUnit(string unitName)
    {
        if (unitName is null)
            throw new NullReferenceException(nameof(unitName));
        unitName = unitName.Trim();
        if (unitName.Length == 0)
            throw new ArgumentException(nameof(unitName));
        UnitName = unitName.TrimToNull();
    }

    /// <summary>
    /// creates instance of InversedKelvinTemperatureUnit
    /// </summary>
    /// <param name="baseUnit">base unit</param>
    /// <param name="unitName">name of unit</param>
    public InversedKelvinTemperatureUnit(KelvinTemperatureUnit baseUnit, string unitName = null)
    {
        if (baseUnit is null)
            throw new NullReferenceException(nameof(baseUnit));
        BaseUnit = baseUnit;
        unitName = unitName?.Trim();
        UnitName = string.IsNullOrEmpty(unitName) ? "1/" + baseUnit.UnitName : unitName;
    }

    public bool Equals(InversedKelvinTemperatureUnit other)
    {
        // generator : InversedUnitGenerator
        return UnitName.Equals(other.UnitName);
    }

    public override bool Equals(object? other)
    {
        // generator : InversedUnitGenerator
        return other is InversedKelvinTemperatureUnit value && Equals(value);
    }

    public DecomposableUnitItem GetBasicUnit()
    {
        // generator : InversedUnitGenerator.Add_Decompose
        var tmp = GetKelvinTemperatureUnit();
        return new DecomposableUnitItem(tmp, -1);
    }

    public override int GetHashCode()
    {
        unchecked
        {
            return UnitName.GetHashCode();
        }
    }

    [RelatedUnitSource(RelatedUnitSourceUsage.ProvidesRelatedUnit, 5)]
    public KelvinTemperatureUnit GetKelvinTemperatureUnit()
    {
        // generator : InversedUnitGenerator.AddGetBaseUnit
        if (BaseUnit is not null)
            return BaseUnit;
        // poor quality code :(, but should work for simple cases like 1/K
        if (UnitName.StartsWith("1/"))
            return new KelvinTemperatureUnit(UnitName.Substring(2));
        throw new NotImplementedException("Not implemented yet");
    }

    /// <summary>
    /// Returns unit name
    /// </summary>
    public override string ToString()
    {
        return UnitName;
    }

    /// <summary>
    /// Inequality operator
    /// </summary>
    /// <param name="left">first value to compare</param>
    /// <param name="right">second value to compare</param>
    public static bool operator !=(InversedKelvinTemperatureUnit left, InversedKelvinTemperatureUnit right)
    {
        return !left.Equals(right);
    }

    /// <summary>
    /// Equality operator
    /// </summary>
    /// <param name="left">first value to compare</param>
    /// <param name="right">second value to compare</param>
    public static bool operator ==(InversedKelvinTemperatureUnit left, InversedKelvinTemperatureUnit right)
    {
        return left.Equals(right);
    }

    /// <summary>
    /// name of unit
    /// </summary>
    [JetBrains.Annotations.NotNull]
    public string UnitName { get; }

    /// <summary>
    /// base unit
    /// </summary>
    [JetBrains.Annotations.CanBeNull]
    public KelvinTemperatureUnit BaseUnit { get; }

}

public static partial class InversedKelvinTemperatureUnits
{
    static InversedKelvinTemperatureUnits()
    {
        // generator : InversedUnitContainerGenerator.Add_StaticConstructor
        All = new []
        {
            Degree
        };
    }

    public static InversedKelvinTemperatureUnit GetInversedKelvinTemperatureUnit(KelvinTemperatureUnit unit)
    {
        // generator : InversedUnitContainerGenerator.Add_GetInversedUnit
        for (var index = All.Count - 1; index >= 0; index--)
        {
            var tmp = All[index].Unit;
            if (unit.Equals(tmp.BaseUnit))
                return tmp;
        }
        throw new NotImplementedException("Not implemented yet");
    }

    /// <summary>
    /// unit 1/K
    /// </summary>
    internal static readonly InversedKelvinTemperatureUnit DegreeInversedKelvinTemperatureUnit = new InversedKelvinTemperatureUnit(KelvinTemperatureUnits.DegreeKelvinTemperatureUnit);

    /// <summary>
    /// unit 1/K with factor
    /// </summary>
    public static readonly UnitDefinition<InversedKelvinTemperatureUnit> Degree = new UnitDefinition<InversedKelvinTemperatureUnit>(DegreeInversedKelvinTemperatureUnit, 1m);

    /// <summary>
    /// All known inversedKelvinTemperatureUnit units
    /// </summary>
    public static readonly IReadOnlyList<UnitDefinition<InversedKelvinTemperatureUnit>> All;

}
