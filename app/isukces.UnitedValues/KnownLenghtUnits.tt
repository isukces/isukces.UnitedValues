<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System.Collections.Generic;
using isukces.UnitedValues;
<# 

var inch = 0.0254m;
var ft = inch * 12;
var yd = 3 * ft;
var furlong = 220 * yd;


var a = new []
{
	new UnitDef("Meter", "m", 1),
	new UnitDef("Km", "km", 1000),
	new UnitDef("Dm", "dm", 0.1m),
	new UnitDef("Cm", "cm", 0.01m),
	new UnitDef("Mm", "mm", 0.001m),


	new UnitDef("Inch", "inch", inch),
	new UnitDef("Foot", "ft", ft),
	new UnitDef("Yard", "yd", yd),
	new UnitDef("Furlong", "fg", furlong),
	new UnitDef("Fathom", "fh", 2 * yd),

	new UnitDef("Mile", "mil", 1609.344m),
	new UnitDef("NauticalMile", "nm", 1852m)
};

#>
namespace isukces.UnitedValues
{

	public static partial class LengthUnits
    {
<# foreach(var i in a) { #>
        public static readonly UnitDefinition<LengthUnit> <#= i.PropName #> = new UnitDefinition<LengthUnit>("<#= i.UnitName #>", <#= i.MultS #>);
<# }#>
		public static IEnumerable<UnitDefinition<LengthUnit>> All {
			get {
<# foreach(var i in a) { #>
				yield return <#= i.PropName #>;
<# }#>
			}
		}
    }

    public static partial class AreaUnits
    {
<# foreach(var i in a) { #>
        public static readonly UnitDefinition<AreaUnit> Square<#= i.PropName #> = new UnitDefinition<AreaUnit>("<#= i.UnitName #>²", <#= i.MultS2 #>, "<#= i.UnitName #>2");
<# }#>
		public static IEnumerable<UnitDefinition<AreaUnit>> All {
			get {
<# foreach(var i in a) { #>
				yield return Square<#= i.PropName #>;
<# }#>
			}
		}

		internal static void Register(UnitRelationsDictionary dict) {
<# foreach(var i in a) { #>
			dict.AddRelated<AreaUnit,LengthUnit>(Square<#= i.PropName #>, LengthUnits.<#= i.PropName #>);
			dict.AddRelated<LengthUnit, AreaUnit>(LengthUnits.<#= i.PropName #>, Square<#= i.PropName #>);
<# }#>		
		}

    }


    public static partial class VolumeUnits
    {
<# foreach(var i in a) { #>
        public static readonly UnitDefinition<VolumeUnit> Qubic<#= i.PropName #> = new UnitDefinition<VolumeUnit>("<#= i.UnitName #>³", <#= i.MultS3 #>, "<#= i.UnitName #>3");
<# }#>
		public static IEnumerable<UnitDefinition<VolumeUnit>> All {
			get {
<# foreach(var i in a) { #>
				yield return Qubic<#= i.PropName #>;
<# }#>
			}
		}

		internal static void Register(UnitRelationsDictionary dict) {
<# foreach(var i in a) { #>
				dict.AddRelated<VolumeUnit,LengthUnit>(Qubic<#= i.PropName #>, LengthUnits.<#= i.PropName #>);
				dict.AddRelated<LengthUnit,VolumeUnit>(LengthUnits.<#= i.PropName #>, Qubic<#= i.PropName #>);
				dict.AddRelated<VolumeUnit,AreaUnit>(Qubic<#= i.PropName #>, AreaUnits.Square<#= i.PropName #>);
				dict.AddRelated<AreaUnit,VolumeUnit>(AreaUnits.Square<#= i.PropName #>, Qubic<#= i.PropName #>);
<# }#>		
		}
    }
}



<#+
class UnitDef
{
    public UnitDef(string propName, string unitName, decimal mult)
    {
        PropName = propName;
        UnitName = unitName;
        Mult = mult;
    }

    public string PropName { get; set; }
    public string UnitName { get; set; }
    public decimal Mult { get; set; }
    public string MultS => Mult.ToString(System.Globalization.CultureInfo.InvariantCulture) + "m";
    public string MultS2 => $"{MultS} * {MultS}";
    public string MultS3 => $"{MultS} * {MultS} * {MultS}";

}

#>